{"mappings":"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","sources":["js/app.js","js/scroll.js","js/shaders/fragment.glsl","js/shaders/noise.glsl","../../../.npm/_npx/b4a9aa12c0cf34a6/node_modules/@parcel/runtime-js/lib/runtime-c8e1ecaf54d8cbab.js","js/shaders/vertex.glsl"],"sourcesContent":["import * as THREE from \"three\";\n\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer.js\";\nimport FontFaceObserver from \"fontfaceobserver\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass.js\";\nimport Scroll from \"./scroll\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass.js\";\nimport fragment from \"./shaders/fragment.glsl\";\nimport gsap from \"gsap\";\nimport imagesLoaded from \"imagesloaded\";\nimport noise from \"./shaders/noise.glsl\";\nimport ocean from \"../img/ocean.jpg\";\nimport vertex from \"./shaders/vertex.glsl\";\n\nexport default class Sketch {\n  constructor(options) {\n    this.time = 0;\n    this.container = options.dom;\n    this.scene = new THREE.Scene();\n\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n\n    this.camera = new THREE.PerspectiveCamera(\n      70,\n      this.width / this.height,\n      100,\n      2000\n    );\n    this.camera.position.z = 600;\n    this.camera.fov = 2 * Math.atan(this.height / 2 / 600) * (180 / Math.PI);\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n    this.container.appendChild(this.renderer.domElement);\n\n    this.images = [...document.querySelectorAll(\"img\")];\n\n    const fontOpen = new Promise((resolve) => {\n      new FontFaceObserver(\"Open Sans\").load().then(() => {\n        resolve();\n      });\n    });\n\n    const fontPlayfair = new Promise((resolve) => {\n      new FontFaceObserver(\"Playfair Display\").load().then(() => {\n        resolve();\n      });\n    });\n\n    // Preload images\n    const preloadImages = new Promise((resolve, reject) => {\n      imagesLoaded(\n        document.querySelectorAll(\"img\"),\n        { background: true },\n        resolve\n      );\n    });\n\n    let allDone = [fontOpen, fontPlayfair, preloadImages];\n\n    this.currentScroll = 0;\n    this.previousScroll = 0;\n\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n\n    Promise.all(allDone).then(() => {\n      this.scroll = new Scroll();\n      // Store and add image to the right position\n      this.addImages();\n      this.setPosition();\n\n      this.mouseMovement();\n      this.resize();\n      this.addControl();\n      this.setupResize();\n      // this.addObjects();\n      this.composerPass();\n\n      this.render();\n      // window.addEventListener(\"scroll\", () => {\n      //   this.currentScroll = window.scrollY;\n      //   this.setPosition();\n      // });\n    });\n  }\n\n  composerPass() {\n    this.composer = new EffectComposer(this.renderer);\n    this.renderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.renderPass);\n\n    // custom shader pass\n    var counter = 0.0;\n    this.myEffect = {\n      uniforms: {\n        tDiffuse: { value: null },\n        scrollSpeed: { value: null },\n        time: { value: null },\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n      uniform sampler2D tDiffuse;\n      varying vec2 vUv;\n      uniform float scrollSpeed;\n      uniform float time;\n      ${noise}\n        void main() {\n          vec2 newUV = vUv;\n          float area = smoothstep(1.,0.7,vUv.y)*2. - 1.;\n          // area = pow(area,4.);\n          float noise = 0.5*(cnoise(vec3(vUv*10., time/2.)) + 1.);\n          float n = smoothstep(0.5,0.51, noise + area);\n          newUV.x -= (vUv.x -0.5) * 0.1 * area * scrollSpeed;\n          gl_FragColor = texture2D(tDiffuse, newUV);\n          // gl_FragColor = vec4(n,0.,0.,1.);\n          gl_FragColor = mix(vec4(1.), texture2D(tDiffuse, newUV), n);\n        }\n      `,\n    };\n    this.customPass = new ShaderPass(this.myEffect);\n    this.customPass.renderToScreen = true;\n\n    this.composer.addPass(this.customPass);\n  }\n\n  mouseMovement() {\n    window.addEventListener(\n      \"mousemove\",\n      (event) => {\n        // calculate mouse position in normalized device coordinates\n        // (-1 to +1) for both components\n        this.mouse.x = (event.clientX / this.width) * 2 - 1;\n        this.mouse.y = -(event.clientY / this.height) * 2 + 1;\n\n        // update the picking ray with the camera and mouse position\n        this.raycaster.setFromCamera(this.mouse, this.camera);\n\n        // calculate objects intersecting the picking ray\n        const intersects = this.raycaster.intersectObjects(this.scene.children);\n\n        if (intersects.length > 0) {\n          let obj = intersects[0].object;\n          obj.material.uniforms.hover.value = intersects[0].uv;\n        }\n      },\n      false\n    );\n  }\n\n  addControl() {\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addImages() {\n    this.material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 },\n        uImage: { value: 0 },\n        hover: { value: new THREE.Vector2(0.5, 0.5) },\n        hoverState: { value: 0 },\n        oceanTexture: { value: new THREE.TextureLoader().load(ocean) },\n      },\n      side: THREE.DoubleSide,\n      fragmentShader: fragment,\n      vertexShader: vertex,\n      // wireframe: true,\n    });\n\n    this.materials = [];\n\n    this.imageStore = this.images.map((img) => {\n      let bounds = img.getBoundingClientRect();\n\n      let geometry = new THREE.PlaneBufferGeometry(\n        bounds.width,\n        bounds.height,\n        10,\n        10\n      );\n\n      let texture = new THREE.Texture(img);\n      texture.needsUpdate = true;\n      // let material = new THREE.MeshBasicMaterial({\n      //   map: texture,\n      // });\n\n      let material = this.material.clone();\n\n      img.addEventListener(\"mouseenter\", () => {\n        gsap.to(material.uniforms.hoverState, {\n          duration: 1,\n          value: 1,\n        });\n      });\n      img.addEventListener(\"mouseout\", () => {\n        gsap.to(material.uniforms.hoverState, {\n          duration: 1,\n          value: 0,\n        });\n      });\n\n      this.materials.push(material);\n\n      material.uniforms.uImage.value = texture;\n\n      let mesh = new THREE.Mesh(geometry, material);\n\n      this.scene.add(mesh);\n\n      return {\n        img,\n        mesh,\n        top: bounds.top,\n        left: bounds.left,\n        width: bounds.width,\n        height: bounds.height,\n      };\n    });\n  }\n\n  setPosition() {\n    this.imageStore.forEach((o) => {\n      o.mesh.position.y =\n        this.height / 2 - o.top - o.height / 2 + this.currentScroll;\n      o.mesh.position.x = -this.width / 2 + o.left + o.width / 2;\n    });\n  }\n\n  addObjects() {\n    this.geometry = new THREE.PlaneBufferGeometry(200, 400, 10, 10);\n\n    // this.geometry = new THREE.SphereBufferGeometry(0.4, 40, 40);\n\n    this.material = new THREE.MeshNormalMaterial();\n\n    this.material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 },\n        oceanTexture: { value: new THREE.TextureLoader().load(ocean) },\n      },\n      side: THREE.DoubleSide,\n      fragmentShader: fragment,\n      vertexShader: vertex,\n      wireframe: true,\n    });\n\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.mesh);\n  }\n\n  render() {\n    this.time += 0.05;\n\n    this.scroll.render();\n    this.previousScroll = this.currentScroll;\n    this.currentScroll = this.scroll.scrollToRender;\n\n    // if (Math.round(this.currentScroll) !== Math.round(this.previousScroll)) {\n    this.setPosition();\n    this.customPass.uniforms.scrollSpeed.value = this.scroll.speedTarget;\n\n    // this.customPass.uniforms.time.value = this.time;\n\n    this.materials.forEach((m) => {\n      m.uniforms.time.value = this.time;\n    });\n    this.composer.render();\n    // }\n\n    window.requestAnimationFrame(this.render.bind(this));\n  }\n}\n\nnew Sketch({\n  dom: document.getElementById(\"container\"),\n});\n","const lerp = (a, b, n) => (1 - n) * a + n * b;\n\nexport default class Scroll {\n  constructor() {\n    this.DOM = {\n      main: document.querySelector(\"main\"),\n    };\n\n    this.DOM.scrollable = this.DOM.main.querySelector(\"div[data-scroll\");\n    this.docScroll = 0;\n    this.scrollToRender = 0;\n    this.current = 0;\n    this.ease = 0.1;\n    this.speed = 0;\n    this.speedTarget = 0;\n\n    // set the body's height\n    this.setSize();\n    // set the initial values\n    this.getScroll();\n    this.init();\n    // the <main> element's style needs to be modified\n    this.style();\n    // init/bind events\n    this.initEvents();\n    requestAnimationFrame(() => this.render());\n  }\n\n  init() {\n    for (const key in this.renderedStyles) {\n      this.current = this.scrollToRender = this.getScroll();\n    }\n    // translate the scrollable element\n    this.setPosition();\n    this.shouldRender = true;\n  }\n\n  style() {\n    this.DOM.main.style.position = \"fixed\";\n    this.DOM.main.style.width = this.DOM.main.style.height = \"100%\";\n    this.DOM.main.style.top = this.DOM.main.style.left = 0;\n    this.DOM.main.style.overflow = \"hidden\";\n  }\n\n  setSize() {\n    // set the height of the body in order to keep the scrollbar on the page\n    document.body.style.height = `${this.DOM.scrollable.scrollHeight}px`;\n  }\n\n  getScroll() {\n    this.docScroll = window.pageYOffset || document.documentElement.scrollTop;\n    return this.docScroll;\n  }\n\n  initEvents() {\n    window.onbeforeunload = function () {\n      window.scrollTo(0, 0);\n    };\n    // on resize reset the body's height\n    window.addEventListener(\"resize\", () => this.setSize());\n    window.addEventListener(\"scroll\", this.getScroll.bind(this));\n  }\n\n  setPosition() {\n    // translates the scrollable element\n    if (\n      Math.round(this.scrollToRender) !== Math.round(this.current) ||\n      this.scrollToRender < 10\n    ) {\n      this.DOM.scrollable.style.transform = `translate3d(0,${\n        -1 * this.scrollToRender\n      }px,0)`;\n    }\n  }\n\n  render() {\n    this.speed =\n      Math.min(Math.abs(this.current - this.scrollToRender), 200) / 200;\n    this.speedTarget += (this.speed - this.speedTarget) * 0.2;\n\n    this.current = this.getScroll();\n    this.scrollToRender = lerp(this.scrollToRender, this.current, this.ease);\n\n    // and translate the scrollable element\n    this.setPosition();\n  }\n}\n","varying float vNoise;\nvarying vec2 vUv;\nuniform sampler2D uImage;\nuniform float time;\nuniform float hoverState;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvoid main() {\n\tvec2 newUV = vUv;\n\n\tvec2 p = newUV;\n\tfloat x = hoverState;\n\tx = smoothstep(.0, 1.0, (x * 2.0 + p.y - 1.0));\n\tvec4 f = mix(texture2D(texture1, (p - .5) * (1. - x) + .5), texture2D(texture2, (p - .5) * x + .5), x);\n\n\tvec4 oceanView = texture2D(uImage, newUV);\n\n\t// gl_FragColor = vec4(finalColor, 1.);\n\t// gl_FragColor = vec4(vUv, 0., 1.);\n\t// gl_FragColor = oceanView;\n\t// gl_FragColor = vec4(vNoise, 0., 0., 1.);\n\n\tgl_FragColor = f;\n\tgl_FragColor.rgb += 0.1 * vec3(vNoise);\n}","//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x) {\n\treturn mod(((x * 34.0) + 1.0) * x, 289.0);\n}\nvec4 taylorInvSqrt(vec4 r) {\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n}\nvec3 fade(vec3 t) {\n\treturn t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nfloat cnoise(vec3 P) {\n\tvec3 Pi0 = floor(P); // Integer part for indexing\n\tvec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n\tPi0 = mod(Pi0, 289.0);\n\tPi1 = mod(Pi1, 289.0);\n\tvec3 Pf0 = fract(P); // Fractional part for interpolation\n\tvec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n\tvec4 iy = vec4(Pi0.yy, Pi1.yy);\n\tvec4 iz0 = Pi0.zzzz;\n\tvec4 iz1 = Pi1.zzzz;\n\n\tvec4 ixy = permute(permute(ix) + iy);\n\tvec4 ixy0 = permute(ixy + iz0);\n\tvec4 ixy1 = permute(ixy + iz1);\n\n\tvec4 gx0 = ixy0 / 7.0;\n\tvec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n\tgx0 = fract(gx0);\n\tvec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n\tvec4 sz0 = step(gz0, vec4(0.0));\n\tgx0 -= sz0 * (step(0.0, gx0) - 0.5);\n\tgy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n\tvec4 gx1 = ixy1 / 7.0;\n\tvec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n\tgx1 = fract(gx1);\n\tvec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n\tvec4 sz1 = step(gz1, vec4(0.0));\n\tgx1 -= sz1 * (step(0.0, gx1) - 0.5);\n\tgy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n\tvec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n\tvec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n\tvec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n\tvec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n\tvec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n\tvec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n\tvec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n\tvec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n\n\tvec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n\tg000 *= norm0.x;\n\tg010 *= norm0.y;\n\tg100 *= norm0.z;\n\tg110 *= norm0.w;\n\tvec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n\tg001 *= norm1.x;\n\tg011 *= norm1.y;\n\tg101 *= norm1.z;\n\tg111 *= norm1.w;\n\n\tfloat n000 = dot(g000, Pf0);\n\tfloat n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n\tfloat n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n\tfloat n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n\tfloat n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n\tfloat n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n\tfloat n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n\tfloat n111 = dot(g111, Pf1);\n\n\tvec3 fade_xyz = fade(Pf0);\n\tvec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n\tvec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n\tfloat n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n\treturn 2.2 * n_xyz;\n}","module.exports = new __parcel__URL__(\"ocean.3c24560f.jpg\").toString();","//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x) {\n\treturn mod(((x * 34.0) + 1.0) * x, 289.0);\n}\nvec4 taylorInvSqrt(vec4 r) {\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n}\nvec3 fade(vec3 t) {\n\treturn t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nfloat cnoise(vec3 P) {\n\tvec3 Pi0 = floor(P); // Integer part for indexing\n\tvec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n\tPi0 = mod(Pi0, 289.0);\n\tPi1 = mod(Pi1, 289.0);\n\tvec3 Pf0 = fract(P); // Fractional part for interpolation\n\tvec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n\tvec4 iy = vec4(Pi0.yy, Pi1.yy);\n\tvec4 iz0 = Pi0.zzzz;\n\tvec4 iz1 = Pi1.zzzz;\n\n\tvec4 ixy = permute(permute(ix) + iy);\n\tvec4 ixy0 = permute(ixy + iz0);\n\tvec4 ixy1 = permute(ixy + iz1);\n\n\tvec4 gx0 = ixy0 / 7.0;\n\tvec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n\tgx0 = fract(gx0);\n\tvec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n\tvec4 sz0 = step(gz0, vec4(0.0));\n\tgx0 -= sz0 * (step(0.0, gx0) - 0.5);\n\tgy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n\tvec4 gx1 = ixy1 / 7.0;\n\tvec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n\tgx1 = fract(gx1);\n\tvec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n\tvec4 sz1 = step(gz1, vec4(0.0));\n\tgx1 -= sz1 * (step(0.0, gx1) - 0.5);\n\tgy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n\tvec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n\tvec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n\tvec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n\tvec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n\tvec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n\tvec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n\tvec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n\tvec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n\n\tvec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n\tg000 *= norm0.x;\n\tg010 *= norm0.y;\n\tg100 *= norm0.z;\n\tg110 *= norm0.w;\n\tvec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n\tg001 *= norm1.x;\n\tg011 *= norm1.y;\n\tg101 *= norm1.z;\n\tg111 *= norm1.w;\n\n\tfloat n000 = dot(g000, Pf0);\n\tfloat n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n\tfloat n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n\tfloat n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n\tfloat n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n\tfloat n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n\tfloat n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n\tfloat n111 = dot(g111, Pf1);\n\n\tvec3 fade_xyz = fade(Pf0);\n\tvec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n\tvec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n\tfloat n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n\treturn 2.2 * n_xyz;\n}\n\nuniform float time;\nuniform vec2 hover;\nuniform float hoverState;\nvarying float vNoise;\nvarying vec2 vUv;\n\nvoid main() {\n\tvec3 newposition = position;\n\tfloat PI = 3.141592654;\n\n\t// newposition.z += 0.1 * sin((newposition.x + 0.25 + time / 10.) * 2. * PI);\n\tfloat noise = cnoise(3. * vec3(position.x, position.y, position.z + time / 30.));\n\n\tfloat dist = distance(uv, hover);\n\n\tnewposition.z += hoverState * 10. * sin(dist * 10. + time);\n\t// newposition.z += 0.05 * sin(noise * 20.);\n\t// newposition += 0.1 * normal * noise;\n\n\tvNoise = sin(dist * 10. + time);\n\tvUv = uv;\n\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(newposition, 1.0);\n}"],"names":[],"version":3,"file":"app.js.map"}